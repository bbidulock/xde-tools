#!/usr/bin/perl

# in case we get executed (not sourced) as a shell program
eval 'exec perl -S $0 ${1+"@"}'
    if $running_under_some_shell;

BEGIN {
    use strict;
    use warnings;
    my $here = $0; $here =~ s{/[^/]*$}{};
    if ($here =~ s{^\.}{}) {
	chomp(my $cwd = `pwd`);
	$here = "/$here" if $here;
	$here = "$cwd$here";
    }
    unshift @INC, "$here/lib" unless $here =~ m{^/usr/bin};
}

use Getopt::Long;
use Encode;
use I18N::Langinfo qw(langinfo CODESET);
use POSIX qw(locale_h);
use XDE::Keys;
use strict;
use warnings;

my %OVERRIDES = ();
my $here = $0; $here =~ s{/[^/]*$}{};
if ($here =~ s{^\.}{}) {
    chomp(my $cwd = `pwd`);
    $here = "/$here" if $here;
    $here = "$cwd$here";
}
unless ($here =~ m{^/usr/bin}) {
    %OVERRIDES = (
	HERE               => "$here",
	XDG_CONFIG_PREPEND => "$here/xdg/xde:$here/xdg:/etc/xdg/xde",
	XDG_DATA_PREPEND   => "$here/share/xde:$here/share:/usr/share/xde",
	XDG_ICON_APPEND    => "$here/share/icons:$here/share/pixmaps:/usr/share/icons:/usr/share/pixmaps",
    );
    my %path = (map{$_=>1}split(/:/,$ENV{PATH}));
    $ENV{PATH} = "$here:$ENV{PATH}" unless exists $path{$here};
}

my $program = $0; $program =~ s{^.*/}{};

my %ops = (
    help	=> '',
    verbose	=> '',
    prompt	=> '',
    banner      => '',
    noask	=> '',
    charset	=> langinfo(CODESET),
    language	=> setlocale(LC_MESSAGES),
    setdflt     => '',
    default	=> '',
    current	=> '',
    choice	=> '',
    vendor	=> '',
    monitor	=> 1,
    grab	=> 1,
    theme	=> '',
    id		=> '',
    setroot	=> 1,
);

my $xde = XDE::Keys->new(%OVERRIDES,ops=>\%ops);
$xde->getenv;

my $syntax = GetOptions(
    'help|h'	    => \$ops{help},
    'verbose|v'	    => \$ops{verbose},
    'monitor!'	    => \$ops{monitor},
    'setroot|s'	    => \$ops{setroot},
    'grab|g'	    => \$ops{grab},
    'n'		    => sub{ $ops{monitor} = 0 },
    'id=s'	    => \$ops{id},
);

my @files = @ARGV;

$ops{id} = hex($ops{id}) if $ops{id} and $ops{id} =~ m{^0x};

$xde->default; # reset defaults

$xde->init;
$xde->main;
$xde->term;

exit(0);

sub show_usage {
    return <<USAGE_EOF;

USAGE:
    xde-keys [OPTIONS]
USAGE_EOF
}

1;

__END__

=head1 NAME

xde-keys -- desktop key bindings for the L<XDE(3pm)> suite

=head1 SYNOPSIS

B<xde-keys> [I<OPTIONS>]

=head1 DESCRIPTION

B<xde-keys> is an L<X11::Protocol(3pm)> and L<Gtk2(3pm)> application
that  can be used to establish key bindings for the desktop in a fashion
similar to B<bbkeys(1)>.  See L</BEHAVIOUR> for detailed behaviour of
the program.

=head1 OPTIONS

It is not normally necessary to specify any options to B<xde-keys> to
obtain proper and full operation.  Nevertheless, B<xde-keys> accepts the
following options: (because L<Getopt::Long(3pm)> is used, non-ambiguous
abbreviations and single dash long options are accepted.)

=head2 COMMAND OPTIONS

B<xde-keys> supports the following major command mode options:

=over

=item B<--edit>, B<-e>

Do not run normally, but, rather, launch the key binding settings
editor.  When a current instance of B<xde-keys> is running, the running
instance will launch the editor; otherwise, a new B<xde-keys> daemon
will be started.

=item B<--quit>, B<-q>

Ask a running instance of B<xde-keys> to quit and exit.

=item B<--restart>, B<-r>

Ask a running instance of B<xde-keys> to restart and exit.

=item B<--help>, B<-h>

Print usage information to standard error containing current defaults
and exit.

=back

=head2 GENERAL OPTIONS

B<xde-keys> supports the following general options:

=over

=item B<--verbose>, B<-v>

Print debugging information on standard error while running.

=item B<--wait>, B<-w>

Wait for a window manager to appear before attempting to bind keys.

=item B<--charset>, B<-c> I<CHARSET>

Set the character set to I<CHARSET>.  The default is to use the settings
of the current locale.

=item B<--language>, B<-L> I<LANGUAGE>

Set the language to I<LANGUAGE>.  The default is to use the setting of
the current locale.

=item B<--theme>, B<-t> I<THEME> or B<--notheme>

Set the theme to the Gtk2 theme name specified, I<THEME>.  The default
is to use the L<XDE(3pm)> specified theme.  B<--notheme> causes
B<xde-keys> to use the default I<Gtk2> theme instead of the I<XDE>
theme.  This only affects keybinding settings configuration dialogs in
B<xde-keys>.

=back

=head1 BEHAVIOUR

=head1 USAGE

B<xde-keys> is intended on being run I<before> the window manager is
started.  This is so that B<xde-keys> can obtain its key bindings before
the window manager attempts to bind the same keys.  This is most
important for L<pekwm(1)>, which has many conflicting key bindings with
the L<XDE(3pm)> defaults.

When B<xde-keys> is started before the window manager, it has the
opportunity to grap keys on the root window and override attempts by the
window manager to grab the same keys when it starts.  When started after
the window manager, B<xde-keys> may fail to grab some keys due to the
window manager having already grabbed those keys.

=head1 WINDOW MANAGERS

In general, just like L<bbkeys(1)>, B<xde-keys> supports just about any
EWMH compliant window manager.  Nevertheless, B<xde-keys> specifically
supports a number of lightweight window managers and manages some quirks
associate with each:

=over

=item L<fluxbox(1)>

=item L<blackbox(1)>

=item L<openbox(1)>

=item L<icewm(1)>

=item L<jwm(1)>

=item L<pekwm(1)>

=item L<wmaker(1)>

=item L<fvwm(1)>

=item L<afterstep(1)>

=item L<metacity(1)>

=back

=head1 ENVIRONMENT

B<xde-keys> respects the following environemnt variables:

=over

=item XDG_CONFIG_HOME

=item XDG_CONFIG_DIRS

=back

=head1 SIGNALS

B<xde-keys> responds to the following signals:

=over

=item $SIG{HUP}

=item $SIG{TERM}

=back

=head1 FILES

B<xde-keys> reads the following files:

=over

=item F<~/.fluxbox/keys>, F</usr/share/fluxbox/keys>

B<xde-keys> examines these files for key configurations.  When told to,
B<xde-keys> will also write the F<~/.fluxbox/keys> file.  B<xde-keys>
will read the fluxbox configuration file F<~/.fluxbox/init> to determine
where the user keys file is located.

=item F<~/.bbkeysrc>

=item F<~/.config/openbox/rc.xml>

=item F<~/.icewm/preferences>

=item F<~/.jwm/keys>

=item F<~/.pekwm/keys>

=item F<~/GNUstep/Defaults/WindowMaker>

=back

=head1 HISTORY

Almost all L<XDE(3pm)> supported window managers provide key bindings
for the desktop, usually grabbed.  In general; however, some window
managers provides some capabilities that others do not.  Some of the
less EWMH supporting window managers are missing some key bindings that
they nevertheless could support using supported EWMH features.  Some
window managers can specify the action taken for any keystroke: that is,
several keys can perform the same key action.  Others, however, such as
L<icewm(1)>, map from action to key and can only support one key for
each action.  Also, each window manager has its own way of specifying
key bindings.  All these realities make it difficult to provide a
consistent user experience for L<XDE(3pm)> across all supported window
managers without a key binding application similar to L<bbkeys(1)>.

=head1 AUTHOR

Brian Bidulock <bidulock@cpan.org>

=head1 SEE ALSO

L<XDE::Keys(3pm)>,
L<X11::Protocol(3pm)>.

=cut

# vim: sw=4 tw=72


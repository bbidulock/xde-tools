#!/usr/bin/perl

# in case we get executed (not sourced) as a shell program
eval 'exec perl -S $0 ${1+"@"}'
    if $running_under_some_shell;

BEGIN {
    use strict;
    use warnings;
    my $here = $0; $here =~ s{/[^/]*$}{};
    if ($here =~ s{^\.}{}) {
	chomp(my $cwd = `pwd`);
	$here = "/$here" if $here;
	$here = "$cwd$here";
    }
    unshift @INC, "$here/lib" unless $here =~ m{^/usr/bin};
}

use Gtk2;

Gtk2::Rc->set_default_files("$ENV{HOME}/.gtkrc-2.0.xde");

use Getopt::Long;
use Encode;
use I18N::Langinfo qw(langinfo CODESET);
use POSIX qw(locale_h);
use XDE::Dock;
use strict;
use warnings;

my %OVERRIDES = ();
my $here = $0; $here =~ s{/[^/]*$}{};
if ($here =~ s{^\.}{}) {
    chomp(my $cwd = `pwd`);
    $here = "/$here" if $here;
    $here = "$cwd$here";
}
unless ($here =~ m{^/usr/bin}) {
    %OVERRIDES = (
	HERE               => "$here",
	XDG_CONFIG_PREPEND => "$here/xdg/xde:$here/xdg",
	XDG_DATA_PREPEND   => "$here/share/xde:$here/share",
	XDG_ICON_APPEND    => "$here/share/icons:$here/share/pixmaps",
    );
    my %path = (map{$_=>1}split(/:/,$ENV{PATH}));
    $ENV{PATH} = "$here:$ENV{PATH}" unless exists $path{$here};
}

my $program = $0; $program =~ s{^.*/}{};

my %ops = (
    help	=> '',
    verbose	=> '',
    prompt	=> '',
    banner      => '',
    noask	=> '',
    charset	=> langinfo(CODESET),
    language	=> setlocale(LC_MESSAGES),
    setdflt     => '',
    default	=> '',
    current	=> '',
    choice	=> '',
    vendor	=> '',
    monitor	=> 1,
    grab	=> 1,
    theme	=> '',
    id		=> '',
    setroot	=> 1,
);

my $xde = XDE::Dock->new(%OVERRIDES,ops=>\%ops);
$xde->getenv;

my $syntax = GetOptions(
    'help|h'	    => \$ops{help},
    'verbose|v'	    => \$ops{verbose},
    'monitor!'	    => \$ops{monitor},
    'setroot|s'	    => \$ops{setroot},
    'grab|g'	    => \$ops{grab},
    'n'		    => sub{ $ops{monitor} = 0 },
    'id=s'	    => \$ops{id},
);

$xde->default; # reset defaults

$SIG{TERM} = sub{$xde->main_quit};
$SIG{INT}  = sub{$xde->main_quit};
$SIG{QUIT} = sub{$xde->main_quit};
$xde->init;
$xde->main;
$xde->term;

exit(0);

sub show_usage {
    return <<USAGE_EOF;

USAGE:
    xde-desktop
USAGE_EOF
}

1;

__END__

=head1 NAME

xde-dock - Window Maker style dock for XDE

=head1 SYNOPSIS

B<xde-dock> [I<OPTIONS>]

=head1 DESCRIPTION

Provides a dock for window managers that do not support one and provides
a more consistent and rich experience for those that do.

=head1 OPTIONS

=head1 ENVIRONMENT VARIABLES

=head1 SIGNALS

=head1 CONFIGURATION FILE

=head1 BEHAVIOUR

=head1 WINDOW MANAGERS

B<xde-dock> supports the full range of window managers supported by the
I<XDE> suite.  It should work well on stacking, non-virtual root,
reparenting, EWMH/NetWM compliant window managers; however, note that
many window managers have issues in this regard.  Supported window
managers include:

=head2 L<fluxbox(1)>

L<fluxbox(1)> provides a dock for dock applications that it calls the
I<slit>.  Only a rudimentary arrangment of dock apps is provided by the
window manager and no mechanism for launching dock apps is provided.

L<fluxbox(1)> cannot be started nor configured to not provide the
I<slit>.

B<xde-dock> provides an enhanced docking experience for L<fluxbox(1)>,
by identifying dock apps, unmapping them, and then reparenting them away
from the L<fluxbox(1)> I<slit>.
B<xde-dock> still repects changes made to the L<fluxbox(1)> I<slit>
configuration so that panel menu controls still function.

=head2 L<blackbox(1)>

L<blackbox(1)> provides a dock for dock applications that it calls the
I<slit>.  No arrangement of dock apps is provided (they appear in the
order in which their windows were mapped), and no mechanism for
launching dock apps is provided.

L<blackbox(1)> cannot be started nor configured to not provide the
I<slit>.

B<xde-dock> provides an enhanced docking experience for L<blackbox(1)>,
by identifying dock apps, unmapping them, and then reparenting them away
from the L<blackbox(1)> I<slit>.
B<xde-dock> still repects changes made to the L<blackbox(1)> I<slit>
configuration so that panel menu controls still function.

=head2 L<openbox(1)>

L<openbox(1)> provides a dock for dock applications that it calls the
I<dock>.  No arrangement of dock apps is provided (they appear in the
order in which their windows were mapped), and no mechanism for
launching dock apps is provided.

L<openbox(1)> cannot be started without the I<dock>, but can be
configured to not implement the I<dock> for a particular configration.

B<xde-dock> provides an enhanced docking experience for L<openbox(1)>,
by identifying dock apps, unmapping them, and then reparenting them away
from the L<openbox(1)> I<dock>.
B<xde-dock> still repects changes made to the L<openbox(1)> I<dock>
configuration so that L<obconf(1)> controls still function.

=head2 L<icewm(1)>

L<icewm(1)> does not provide a dock for dock applications.  When
launched, dock apps will often appear in their own window because
L<icewm(1)> does not understand mapping windows in the
C<WithdrawnState>: it interprets the C<WithdrawnState> as a don't-care
state.

B<xde-dock> provides an consistent docking experience for L<icewm(1)>,
by identifying dock apps, unmapping them, and then reparenting them away
from the L<icewm(1)>.

=head2 L<jwm(1)>

L<jwm(1)> does not provide a dock for dock applications.
It does, however, understand mapping in the C<WithdrawnState> and does
not display dock applications at all.

B<xde-dock> provides an consistent docking experience for L<jwm(1)>,
by identifying dock apps, unmapping them, and then reparenting them away
from the L<jwm(1)>.

=head2 L<pekwm(1)>

L<pekwm(1)> provides a dock for dock applications that it calls the
I<harbour>.  No arrangement of dock apps is provided (they appear in the
order in which their windows were mapped), and no mechanism for
launching dock apps is provided.  L<pekwm(1)> does not handle centering
of dock apps in tiles the way that the others (L<fluxbox(1)>,
L<blackbox(1)>, L<openbox(1)>) do, and will mess up when a 56x56 dock
app expects to be centered in a 64x64 tile.

L<pekwm(1)> cannot be started nor configured to not provide the
I<harbour>.

B<xde-dock> provides an enhanced docking experience for L<pekwm(1)>,
by identifying dock apps, unmapping them, and then reparenting them away
from the L<pekwm(1)> I<harbor>.
B<xde-dock> still repects changes made to the L<pekwm(1)> I<harbor>
configuration so that root menu controls still function.

=head2 L<wmaker(1)>

L<wmaker(1)> provides a dock for dock applications that it calls the
I<dock>.  It provides for graphical rearrangement of dock apps in the
dock, has a builtin mechanism for launching dock apps at startup and
even now has drawers.

L<wmaker(1)> can be started without its I<dock> (command line option).

=head2 L<fvwm(1)>

L<fvwm(1)> provides a dock for dock applications that it calls the
I<wharf>.
It provides for configured arrangement of dock apps; however, docking is
not automatic and specific dock applications must be "swallowed" into
the I<wharf>.

L<fvwm(1)> can be started without a I<wharf> by configuration, but not
by command line option.

B<xde-dock> provides an enhanced docking experience for L<fvwm(1)>,
by identifying dock apps, unmapping them, and then reparenting them away
from the L<fvwm(1)>.

=head2 L<afterstep(1)>

L<afterstep(1)> provides a dock for dock applications that it calls the
I<wharf>.
It provides for configured arrangement of dock apps; however, docking is
not automatic and specific dock applications must be "swallowed" into
the I<wharf>.

L<afterstep(1)> can be started without a I<wharf> by configuration, but
not by command line option.

B<xde-dock> provides an enhanced docking experience for L<afterstep(1)>,
by identifying dock apps, unmapping them, and then reparenting them away
from the L<afterstep(1)>.

=head2 L<metacity(1)>

L<metacity(1)> does not provide a dock for dock applications.
It does, however, understand mapping in the C<WithdrawnState> and does
not display dock applications at all.

B<xde-dock> provides an consistent docking experience for L<metacity(1)>,
by identifying dock apps, unmapping them, and then reparenting them away
from the L<metacity(1)>.

=head1 HISTORY

I wrote B<xde-dock> because there were three supported window managers
in the I<XDE> suite that did not support a window maker application
dock.  Once written, it was apparent that a more rich experience could
be provided to users of those window managers that do support a dock.

=head1 AUTHOR

Brian Bidulock <bidulock@cpan.org>

=head1 SEE ALSO

=cut

# vim: set sw=4 tw=72:

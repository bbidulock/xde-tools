#!/usr/bin/perl

# in case we get executed (not sourced) as a shell program
eval 'exec perl -S $0 ${1+"@"}'
    if $running_under_some_shell;

BEGIN {
    use strict;
    use warnings;
    my $here = $0; $here =~ s{/[^/]*$}{};
    if ($here =~ s{^\.}{}) {
	chomp(my $cwd = `pwd`);
	$here = "/$here" if $here;
	$here = "$cwd$here";
    }
    print STDERR "here is: '$here'\n";
    unshift @INC, "$here/lib" unless $here =~ m{^/usr/bin/};
}

package MyICCCM;
use base qw(X11::Protocol::WMSpecific X11::Protocol::EWMH X11::Protocol::WMH X11::Protocol::ICCCM X11::Protocol::Util X11::Protocol);

package main;
use strict;
use warnings;
use Carp qw(confess);

sub my_error_handler {
    my($self,$data) = @_;
    confess($self->format_error_msg($data));
}

my $X = MyICCCM->new();

$X->wm_check();

sub check_window {
    my($X,$window) = @_;
    my($root,$parent,@kids) = $X->QueryTree($window);
    my @properties = sort
	map{$X->atom_name($_)}
	$X->ListProperties($window);
    my @known = sort
	map{$X->can("get$_")?$_:()}
	@properties;
    my @unknown = sort
	map{$X->can("get$_")?():$_}
	@properties;
    my $res;
    ($res) = $X->robust_req(GetGeometry=>$window);
    if (ref $res) {
	my %geom = (@$res);
	($res) = $X->robust_req(GetWindowAttributes=>$window);
	if (ref $res) {
	    my %attr = (@$res);
	    printf "Client window: 0x%08x, %dx%d+%d+%d %d%s\n",$window,
		$geom{width},$geom{height},$geom{x},$geom{y},
		$geom{border_width},$attr{override_redirect}?' (override-redirect)':'';
	} else {
	    printf "Client window: 0x%08x, %dx%d+%d+%d %d\n",$window,
		$geom{width},$geom{height},$geom{x},$geom{y},
		$geom{border_width};
	}
    } else {
	printf "Client window: 0x%08x\n", $window;
    }
#   printf "\t%-20s: 0x%08x\n",root=>$root;
    printf "\t%-20s: 0x%08x\n",parent=>$parent if $parent and $parent ne $root and $parent ne 'None';
    printf "\t%-20s: %s\n",children=>join(', ',map{sprintf("0x%08x",$_)}@kids) if @kids;
    ($res) = $X->robust_req(GetWindowAttributes=>$window);
#    if (ref $res) {
#	my %attrs = (@$res);
#	printf "  %s:\n", 'ATTRIBUTES';
#	foreach (qw(win_gravity override_redirect)) {
##	foreach (qw(backing_store visual class bit_gravity win_gravity
##		    backing_planes backing_pixel map_is_installed
##		    map_state override_redirect colormap your_event_mask
##		    do_not_propagate_mask)) {
#	    next unless defined $attrs{$_};
#	    printf "\t%-20s: %s\n", $_,$attrs{$_};
#	}
#    }
#    if (ref $res) {
#	my %geom = (@$res);
#	printf "\%-20s: %dx%d+%d+%d %d\n",geometry=>
#	    $geom{width},$geom{height},$geom{x},$geom{y},
#	    $geom{border_width};
#	printf "  %s:\n", 'GEOMETRY';
#	foreach (qw(depth)) {
#	    next unless defined $geom{$_};
#	    printf "\t%-20s: %s\n", $_,$geom{$_};
#	}
#	foreach (qw(root)) {
#	    next unless defined $geom{$_};
#	    printf "\t%-20s: 0x%08x\n", $_,$geom{$_};
#	}
#	foreach (qw(x y width height border_width)) {
#	    next unless defined $geom{$_};
#	    printf "\t%-20s: %s\n", $_,$geom{$_};
#	}
#    }
    if (@properties) {
	printf "  %s:\n", 'PROPERTIES';
	 #printf "\t%-20s: %s\n", properties=>join(', ',@properties);
	my %seen = ();
	foreach (qw(WM_NAME WM_CLASS WM_STATE WM_HINTS WM_NORMAL_HINTS), @known) {
	    next if $seen{$_};
	    if (defined(my $result = $X->can("get$_")->($X,$window))) {
		if ($X->can("dmp$_")) {
		    $X->can("dmp$_")->($X,$result);
		} else {
		    warn "No dmp method for '$_'";
		}
	    }
	    $seen{$_} = 1;
	}
	printf "\t%-20s: %s\n", unknown=>join(', ',@unknown) if @unknown;
    }
    foreach (@kids) {
	check_window($X,$_);
    }
}

check_window($X,$X->root);

exit(0);

# vim: set sw=4 tw=72 fo=tcqlorn foldmarker==head,=head foldmethod=marker:

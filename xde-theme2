#!/usr/bin/perl

# in case we get executed (not sourced) as a shell program
eval 'exec perl -S $0 ${1+"@"}'
    if $running_under_some_shell;

BEGIN {
    use strict;
    use warnings;
    my $here = $0; $here =~ s{/[^/]*$}{};
    if ($here =~ s{^\.}{}) {
	chomp(my $cwd = `pwd`);
	$here = "/$here" if $here;
	$here = "$cwd$here";
    }
    unshift @INC, "$here/lib" unless $here =~ m{^/usr/bin};
}

use Getopt::Long;
use Encode;
use I18N::Langinfo qw(langinfo CODESET);
use POSIX qw(locale_h);
use XDE::Theme;
use strict;
use warnings;

my %OVERRIDES = ();
my $here = $0; $here =~ s{/[^/]*$}{};
if ($here =~ s{^\.}{}) {
    chomp(my $cwd = `pwd`);
    $here = "/$here" if $here;
    $here = "$cwd$here";
}
unless ($here =~ m{^/usr/bin}) {
    %OVERRIDES = (
	HERE               => "$here",
	XDG_CONFIG_PREPEND => "$here/xdg/xde:$here/xdg:/etc/xdg/xde",
	XDG_DATA_PREPEND   => "$here/share/xde:$here/share:/usr/share/xde",
	XDG_ICON_APPEND    => "$here/share/icons:$here/share/pixmaps:/usr/share/icons:/usr/share/pixmaps",
    );
    my %path = (map{$_=>1}split(/:/,$ENV{PATH}));
    $ENV{PATH} = "$here:$ENV{PATH}" unless exists $path{$here};
}

my $program = $0; $program =~ s{^.*/}{};

my %ops = (
    help	=> '',
    verbose	=> '',
    prompt	=> '',
    banner      => '',
    noask	=> '',
    charset	=> langinfo(CODESET),
    language	=> setlocale(LC_MESSAGES),
    setdflt     => '',
    default	=> '',
    current	=> '',
    choice	=> '',
    vendor	=> '',
    monitor	=> 1,
    grab	=> 1,
    theme	=> '',
    id		=> '',
    setroot	=> 1,
);

my $xde = XDE::Theme->new(%OVERRIDES,ops=>\%ops);
$xde->getenv;

my $syntax = GetOptions(
    'help|h'	    => \$ops{help},
    'verbose|v'	    => \$ops{verbose},
    'monitor!'	    => \$ops{monitor},
    'setroot|s'	    => \$ops{setroot},
    'grab|g'	    => \$ops{grab},
    'n'		    => sub{ $ops{monitor} = 0 },
    'id=s'	    => \$ops{id},
);

my @themes = @ARGV;

$ops{id} = hex($ops{id}) if $ops{id} and $ops{id} =~ m{^0x};

$xde->default; # reset defaults

$xde->init;
#$xde->set_theme(@themes);
$xde->main;
$xde->term;

exit(0);

sub show_usage {
    return <<USAGE_EOF;

USAGE:
    xde-theme2 [OPTIONS] [THEME [THEME ...]]
USAGE_EOF
}

1;

__END__

=head1 NAME

xde-theme2 - perform and monitor XDE theme changes

=head1 SYNOPSIS

B<xde-theme2> [I<OPTIONS>] [I<THEME> [I<THEME> ...]]

=head1 DESCRIPTION

B<xde-theme2> is an L<X11::Protocol(3pm)> application that can be used
to set theme for an L<XDE(3pm)> session.  It also monitors for window
manager style changes and coordinates the corresponding L<Gtk2(3pm)>
theme for L<XDE(3pm)> accordingly.

=head1 ARGUMENTS

B<xde-theme2> takes the following arguments:

=over

=item [I<THEME> [I<THEME> ...]]

A list of theme names that specify which theme is to be applied (in
order of preference).

=back

=head1 OPTIONS

B<xde-theme2> uses L<Getopt::Long(3pm)> to parse options, so
non-ambiguous options and single-dash long options are supported.  The
following options are recognized:

=head2 COMMAND OPTIONS

B<xde-theme2> command options affect the major operating modes of the
program: only one of these options should be specified.  The recognized
command options are as follows:

=over

=item B<--edit>, B<-e>

Do not set the theme, but, rather, launch the theme selection dialogue.
When a current instance of B<xde-theme2> is running, the running
instance will launch the dialogue; otherwise, a new B<xde-theme2>
instance will be started.

=item B<--quit>, B<-q>

Ask a running instance of B<xde-theme2> to quit.

=item B<--restart>, B<-r>

Ask a running instance of B<xde-theme2> to restart.

=item B<--help>, B<-h>

Print usage information to standard error containing current defaults
and exit.

=back

=head2 GENERAL OPTIONS

B<xde-theme2> also recognizes the following general options:

=over

=item B<--verbose>, B<-v>

Print debugging information on standard error while running.

=item B<--nomonitor>, B<-n>

Specifies that B<xde-theme2> should just set the theme and should not
monitor for changes.  You should just use the window manager to set the
theme instead of using this option.

=back

=head1 BEHAVIOUR

When B<xde-theme2> is execute and an existing instance of B<xde-theme2>
is running, it passes its arguments to the running program and exits.
Otherwise, it places itself in the background and performs the requested
action.  When the B<--nomonitor> option is specified (see L</OPTIONS>),
B<xde-theme2> performs the action and then exits, regardless of whether
there is an existing instance.

On the initial invocation of B<xde-theme2> for a given X Display,
B<xde-theme2> will first await the appearance of an X Window Manager
that conforms to the EWMH/NetWM specification.

After beginning full operation, B<xde-theme2> will complete startup
notification (if it was requested).  It then determines whether an
XSETTINGS daemon is in operation, and if so, will read its settings from
the XSETTINGS daemon.  In the absence of an XSETTINGS daemon, it will
read its configuration from its configuration file.  See
L</CONFIGURATION> for how the configuration file is selected.

The configuration will then be used to set the theme and will monitor
for further desktop theme changes on the X Display.

B<xde-theme2> also understands the file and style settings for various
lightweight window managers: L<fluxbox(1)>, L<blackbox(1)>,
L<openbox(1)>, L<icewm(1)>, L<jwm(1)>, L<pekwm(1)>, L<fvwm(1)>,
L<wmaker(1)>, L<metacity(1)> and L<afterstep(1)>.  B<xde-theme2>
monitors the style files for these window managers and coordinates the
corresponding Gtk2 theme with L<XDE(3pm)> tools that use the XDE theme.

The user will observer the following when B<xde-theme2> is running:

=over

=item 1.

All L<XDE(3pm)> tools will follow the same theme.

=item 2.

The theme will be one that closely corresponds to the window manager
theme.

=item 3.

When the window manager style or theme is changed for a supported
window manager, the theme of the L<XDE(3pm)> tools will change as well
(even when they are displaying a window).

=back

=head2 OPERATION

B<xde-theme2> monitors for window manager style changes, and, when
detected, attempts to change the GTK2 theme to the corresponding
L<XDE(3pm)> GTK2 style.  It does this by performing the following
actions:

=over

=item 1.

When it detects a window manager style change (see L</WINDOW MANAGERS>),
it searches for an L<XDE(3pm)> theme with the same name as the new
style.  It does this by searching for a file named
F<@XDG_DATA_DIRS/themes/$name/xde/theme.ini>.  If it finds the file, it
uses the C<Xde/ThemeName> resource from the file to determine the
corresponding GTK2 theme name for the XDE theme.  When no F<theme.ini>
file exists, it uses the style name of the window manager for the next
step.

=item 2.

B<xde-theme2> searches for a
F<@XDG_DATA_DIRS/themes/$theme/gtk-2.0/gtkrc> file there C<$theme> is
the name from the F<theme.ini> file or window manager style name from
the previous step.  If the file does not exist, the default Gtk2 theme
is used instead.

=item 3.

B<xde-theme2> then edits the F<~/gtkrc-2.0.xde> file to contain the
theme name C<Gtk/ThemeName> associated with the L<XDE(3pm)> suite and
then issues a C<_GTK_READ_RCFILES> ClientMessage to the root window of
the display to cause all currently running L<XDE(3pm)> tools to reload
their GTK2 rc files.

=back

=head1 CONFIGURATION

A F<xde-theme2.desktop> file is distributed with B<xde-theme2> that can
be used to autostart the program in an XDG compliant environment such as
is provided by the L<XDE(3pm)>.  Startup of the program conforms to the
XDG Startup specifications, and the program will notify the launcher
once it has fully started.

=head1 WINDOW MANAGERS

B<xde-theme2> supports a number of lightweight window managers and
manages some quirks associated with each:

=over

=item L<fluxbox(1)>

When L<fluxbox(1)> changes its style, it writes the new style in the
C<sessionStyle> resource in the F<~/.fluxbox/init> file.

When B<xde-theme2> detects the style change, it attempts to change the
L<XDE(3pm)> style to a corresponding GTK2 style.

When a theme change is requested, it alters the C<sessionStyle> resource
in the F<~/.fluxbox/init> file and then asks L<fluxbox(1)> to restart.
(Note that a reload is not sufficient because L<fluxbox(1)> does not
effect a change its menu styles without a restart.)

=item L<blackbox(1)>

L<blackbox(1)> is similar to L<fluxbox(1)>: it set the them in the
F<~/.blackboxrc> file when changing themes; however, L<blackbox(1)>
normally changes the background with every theme change, therefore, a
change in the background image should also trigger a theme recheck.

When B<xde-theme2> detects the style change, it attempts to change the
L<XDE(3pm)> style to a corresponding GTK2 style.

When a theme change is requested, B<xde-theme2> changes the
C<sessionStyle> resource in the F<~/.blackboxrc> file and then asks
L<blackbox(1)> to restart.

=item L<openbox(1)>

When L<openbox(1)> changes its theme, it changes the C<_OB_THEME>
property on the root window: so a simple C<PropertyNotify> on this
property should trigger a recheck.  Note that L<openbox(1)> also sets
the C<_OB_CONFIG_FILE> property on the root window when the
configuration file differs from the default (but not otherwise).  Note
that L<openbox(1)> also changes the C<theme> section in
F<~/.config/rc.xml> and writes the file, but we don't need that for
detection.

When B<xde-theme2> detects a C<_OB_THEME> property change, it attempts
to change the L<XDE(3pm)> style to a corresponding GTK2 style.

When a theme change is requested, B<xde-theme2> alters the C<theme>
section in the F<~/.config/rc.xml> file and requests that L<openbox(1)>
perform a reconfigure (this is performed by sending a C<ClientMessage>
to the root window).

=item L<icewm(1)>

L<icewm(1)> sets the theme in its F<~/.icewm/theme> or
F<$ICEWM_PRIVCFG/theme> file.  However, when L<icewm(1)> changes its
theme it restarts, which results in a new
C<_NET_SUPPORTING_WM_CHECK(WINDOW)> window.

When B<xde-theme2> detects the style change in response to a change to
the file or a window manager restart, it attempts to change the
L<XDE(3pm)> style to a corresponding GTK2 style.

When a theme change is requested, B<xde-theme2> changes the
F<~/.icewm/theme> or F<ICEWM_PRIVCFG/theme> file and requests a restart
from L<icewm(1)>.

=item L<jwm(1)>

When L<jwm(1)> changes its style, it rewrites F<~/.jwm/style> to include
a new file and restarts.

When B<xde-theme2> detects the style change in response to a change in
the file or a window manager restart, it attempts to change the
L<XDE(3pm)> style to a corresponding GTK2 style.

When a theme change is requested, B<xde-theme2> alters the
F<~/.jwm/style> file and requests a reload or restart from L<jwm(1)>.
Reloading L<jwm(1)> is effected by sending a C<_JWM_RELOAD>
C<ClientMessage> to the root window; restart, using a C<_JWM_RESTART>
message.  It is also possible to execute C<jwm -reload> or C<jwm
-restart> to effect the same change.

=item L<pekwm(1)>

When L<pekwm(1)> changes its style, it places the theme directory into
the F<~/.pekwm/config> file.  This file should be checked whenever the
window manager starts or restarts.

When B<xde-theme2> detects the style change, it attempts to change the
L<XDE(3pm)> style to a corresponding GTK2 style.

When a theme change is requested, B<xde-theme2> alters the
F<~/.pekwm/config> file and requests a restart from L<pekwm(1)>.

=item L<wmaker(1)>

=item L<fvwm(1)>

=item L<afterstep(1)>

=item L<metacity(1)>

=back

=head1 HISTORY

I wrote B<xde-theme2> to work with L<xde-setbg(1p)> to support
consistent desktop environment theme changes across a wide range of
lightweight window managers.  It was desirable to have all L<XDE(3pm)>
tools use the same GTK2 style, independent of the style used for regular
applications, and far more in line with the window manager style (in
particular, the style that the window manager uses for menus, window
lists, dialogs, etc.).  To accomplish this, all L<XDE(3pm)> tools that
need to have the same appearance as the window manager (there are some
exceptions) place the user's F<~/.gtk-2.0.xde> rc file in the default
list for GTK2 ahead of any others, so that it will pick up changes in
this style.

L<xde-setbg(1p)> could easily be adapted to perform this function as
well; however, I felt that the theme monitoring application should be
separate from the background switcher.  A primary reason for the
independence is that some window managers (only L<wmaker(1)> at the
moment) are quite capable of managing theme settings for multiple
backgrounds without needing L<xde-setbg(1p)> running, but the need for
an L<XDE(3pm)> theme switcher still exists.  Also, there was a desire to
have a single theme choosing application that would work with all window
managers.

=head1 AUTHOR

Brian Bidulock <bidulock@cpan.org>

=head1 SEE ALSO

L<xde-setbg(1)>,
L<XDE::Theme(3pm)>,
L<XDE::Context(3pm)>,
L<XDG::Context(3pm)>.

=cut

# vim: sw=4 tw=72

